
Temperature Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008f4  00000988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa5  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097e  00000000  00000000  000022f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfe  00000000  00000000  000033e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	98 01       	movw	r18, r16
  56:	b1 01       	movw	r22, r2
  58:	ca 01       	movw	r24, r20
  5a:	e3 01       	movw	r28, r6
  5c:	fb 01       	movw	r30, r22
  5e:	fb 01       	movw	r30, r22
  60:	fb 01       	movw	r30, r22
  62:	fb 01       	movw	r30, r22
  64:	fb 01       	movw	r30, r22
  66:	fb 01       	movw	r30, r22
  68:	fb 01       	movw	r30, r22
  6a:	fb 01       	movw	r30, r22
  6c:	fb 01       	movw	r30, r22
  6e:	fb 01       	movw	r30, r22
  70:	fb 01       	movw	r30, r22
  72:	fb 01       	movw	r30, r22
  74:	fb 01       	movw	r30, r22
  76:	fb 01       	movw	r30, r22
  78:	fb 01       	movw	r30, r22
  7a:	fb 01       	movw	r30, r22
  7c:	fb 01       	movw	r30, r22
  7e:	fb 01       	movw	r30, r22
  80:	fb 01       	movw	r30, r22
  82:	fb 01       	movw	r30, r22
  84:	fb 01       	movw	r30, r22
  86:	fb 01       	movw	r30, r22
  88:	fb 01       	movw	r30, r22
  8a:	fb 01       	movw	r30, r22
  8c:	fb 01       	movw	r30, r22
  8e:	fb 01       	movw	r30, r22
  90:	fb 01       	movw	r30, r22
  92:	fb 01       	movw	r30, r22
  94:	98 01       	movw	r18, r16
  96:	b1 01       	movw	r22, r2
  98:	ca 01       	movw	r24, r20
  9a:	e3 01       	movw	r28, r6
  9c:	08 02       	muls	r16, r24
  9e:	21 02       	muls	r18, r17
  a0:	3a 02       	muls	r19, r26
  a2:	53 02       	muls	r21, r19
  a4:	6b 02       	muls	r22, r27
  a6:	6b 02       	muls	r22, r27
  a8:	6b 02       	muls	r22, r27
  aa:	6b 02       	muls	r22, r27
  ac:	6b 02       	muls	r22, r27
  ae:	6b 02       	muls	r22, r27
  b0:	6b 02       	muls	r22, r27
  b2:	6b 02       	muls	r22, r27
  b4:	6b 02       	muls	r22, r27
  b6:	6b 02       	muls	r22, r27
  b8:	6b 02       	muls	r22, r27
  ba:	6b 02       	muls	r22, r27
  bc:	6b 02       	muls	r22, r27
  be:	6b 02       	muls	r22, r27
  c0:	6b 02       	muls	r22, r27
  c2:	6b 02       	muls	r22, r27
  c4:	6b 02       	muls	r22, r27
  c6:	6b 02       	muls	r22, r27
  c8:	6b 02       	muls	r22, r27
  ca:	6b 02       	muls	r22, r27
  cc:	6b 02       	muls	r22, r27
  ce:	6b 02       	muls	r22, r27
  d0:	6b 02       	muls	r22, r27
  d2:	6b 02       	muls	r22, r27
  d4:	6b 02       	muls	r22, r27
  d6:	6b 02       	muls	r22, r27
  d8:	6b 02       	muls	r22, r27
  da:	6b 02       	muls	r22, r27
  dc:	08 02       	muls	r16, r24
  de:	21 02       	muls	r18, r17
  e0:	3a 02       	muls	r19, r26
  e2:	53 02       	muls	r21, r19
  e4:	77 02       	muls	r23, r23
  e6:	79 02       	muls	r23, r25
  e8:	7b 02       	muls	r23, r27
  ea:	7d 02       	muls	r23, r29
  ec:	7e 02       	muls	r23, r30
  ee:	7e 02       	muls	r23, r30
  f0:	7e 02       	muls	r23, r30
  f2:	7e 02       	muls	r23, r30
  f4:	7e 02       	muls	r23, r30
  f6:	7e 02       	muls	r23, r30
  f8:	7e 02       	muls	r23, r30
  fa:	7e 02       	muls	r23, r30
  fc:	7e 02       	muls	r23, r30
  fe:	7e 02       	muls	r23, r30
 100:	7e 02       	muls	r23, r30
 102:	7e 02       	muls	r23, r30
 104:	7e 02       	muls	r23, r30
 106:	7e 02       	muls	r23, r30
 108:	7e 02       	muls	r23, r30
 10a:	7e 02       	muls	r23, r30
 10c:	7e 02       	muls	r23, r30
 10e:	7e 02       	muls	r23, r30
 110:	7e 02       	muls	r23, r30
 112:	7e 02       	muls	r23, r30
 114:	7e 02       	muls	r23, r30
 116:	7e 02       	muls	r23, r30
 118:	7e 02       	muls	r23, r30
 11a:	7e 02       	muls	r23, r30
 11c:	7e 02       	muls	r23, r30
 11e:	7e 02       	muls	r23, r30
 120:	7e 02       	muls	r23, r30
 122:	7e 02       	muls	r23, r30
 124:	77 02       	muls	r23, r23
 126:	79 02       	muls	r23, r25
 128:	7b 02       	muls	r23, r27
 12a:	7d 02       	muls	r23, r29
 12c:	8a 02       	muls	r24, r26
 12e:	8c 02       	muls	r24, r28
 130:	8e 02       	muls	r24, r30
 132:	90 02       	muls	r25, r16
 134:	91 02       	muls	r25, r17
 136:	91 02       	muls	r25, r17
 138:	91 02       	muls	r25, r17
 13a:	91 02       	muls	r25, r17
 13c:	91 02       	muls	r25, r17
 13e:	91 02       	muls	r25, r17
 140:	91 02       	muls	r25, r17
 142:	91 02       	muls	r25, r17
 144:	91 02       	muls	r25, r17
 146:	91 02       	muls	r25, r17
 148:	91 02       	muls	r25, r17
 14a:	91 02       	muls	r25, r17
 14c:	91 02       	muls	r25, r17
 14e:	91 02       	muls	r25, r17
 150:	91 02       	muls	r25, r17
 152:	91 02       	muls	r25, r17
 154:	91 02       	muls	r25, r17
 156:	91 02       	muls	r25, r17
 158:	91 02       	muls	r25, r17
 15a:	91 02       	muls	r25, r17
 15c:	91 02       	muls	r25, r17
 15e:	91 02       	muls	r25, r17
 160:	91 02       	muls	r25, r17
 162:	91 02       	muls	r25, r17
 164:	91 02       	muls	r25, r17
 166:	91 02       	muls	r25, r17
 168:	91 02       	muls	r25, r17
 16a:	91 02       	muls	r25, r17
 16c:	8a 02       	muls	r24, r26
 16e:	8c 02       	muls	r24, r28
 170:	8e 02       	muls	r24, r30
 172:	90 02       	muls	r25, r16

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e4 ef       	ldi	r30, 0xF4	; 244
 188:	f8 e0       	ldi	r31, 0x08	; 8
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a0 37       	cpi	r26, 0x70	; 112
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	a0 e7       	ldi	r26, 0x70	; 112
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	a2 37       	cpi	r26, 0x72	; 114
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
 1aa:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <main>:
#include <util/delay.h>

unsigned short temperature;
int main(void)
{
	LCD_vInit();
 1b2:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_vInit>
	ADC_vInit(CHANNEL1);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 75 01 	call	0x2ea	; 0x2ea <ADC_vInit>
	LCD_vSendString("Temperature = ");
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 13 03 	call	0x626	; 0x626 <LCD_vSendString>
		{
			//Write New Temp Value
			LCD_vMoveCursor(1, 14);
			LCD_vSendChar(' ');
			LCD_vSendChar(' ');
			LCD_vSendChar(temperature + 48);
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f0 e7       	ldi	r31, 0x70	; 112
 1c8:	ef 2e       	mov	r14, r31
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ff 2e       	mov	r15, r31
 1ce:	f0 2d       	mov	r31, r0
		}
		else if(temperature < 155)
		{
			//Write New Temp Value
			LCD_vMoveCursor(1, 14);
			LCD_vSendChar((temperature / 100) + 48);
 1d0:	04 e6       	ldi	r16, 0x64	; 100
 1d2:	10 e0       	ldi	r17, 0x00	; 0
			LCD_vSendChar(((temperature % 100) / 10) + 48);
 1d4:	ca e0       	ldi	r28, 0x0A	; 10
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_vInit();
	ADC_vInit(CHANNEL1);
	LCD_vSendString("Temperature = ");
	while(1)
	{
		temperature = (ADC_u16Read() * 0.25);
 1d8:	0e 94 82 01 	call	0x304	; 0x304 <ADC_u16Read>
 1dc:	bc 01       	movw	r22, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__floatunsisf>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 e8       	ldi	r20, 0x80	; 128
 1ec:	5e e3       	ldi	r21, 0x3E	; 62
 1ee:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 1f2:	0e 94 34 03 	call	0x668	; 0x668 <__fixunssfsi>
 1f6:	ab 01       	movw	r20, r22
 1f8:	bc 01       	movw	r22, r24
 1fa:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <__data_end+0x1>
 1fe:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <__data_end>
		if(temperature < 10)
 202:	4a 30       	cpi	r20, 0x0A	; 10
 204:	51 05       	cpc	r21, r1
 206:	b0 f4       	brcc	.+44     	; 0x234 <main+0x82>
		{
			//Write New Temp Value
			LCD_vMoveCursor(1, 14);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	6e e0       	ldi	r22, 0x0E	; 14
 20c:	0e 94 22 03 	call	0x644	; 0x644 <LCD_vMoveCursor>
			LCD_vSendChar(' ');
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(' ');
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(temperature + 48);
 21c:	f7 01       	movw	r30, r14
 21e:	80 81       	ld	r24, Z
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(0xDF);
 226:	8f ed       	ldi	r24, 0xDF	; 223
 228:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar('C');
 22c:	83 e4       	ldi	r24, 0x43	; 67
 22e:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
 232:	d2 cf       	rjmp	.-92     	; 0x1d8 <main+0x26>
		}
		else if(temperature < 100)
 234:	44 36       	cpi	r20, 0x64	; 100
 236:	51 05       	cpc	r21, r1
 238:	18 f5       	brcc	.+70     	; 0x280 <main+0xce>
		{
			//Write New Temp Value
			LCD_vMoveCursor(1, 14);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	6e e0       	ldi	r22, 0x0E	; 14
 23e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_vMoveCursor>
			LCD_vSendChar(' ');
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar((temperature / 10) + 48);
 248:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 24c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 250:	be 01       	movw	r22, r28
 252:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 256:	86 2f       	mov	r24, r22
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar((temperature % 10) + 48);
 25e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 262:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 266:	be 01       	movw	r22, r28
 268:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(0xDF);
 272:	8f ed       	ldi	r24, 0xDF	; 223
 274:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar('C');
 278:	83 e4       	ldi	r24, 0x43	; 67
 27a:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
 27e:	ac cf       	rjmp	.-168    	; 0x1d8 <main+0x26>
		}
		else if(temperature < 155)
 280:	4b 39       	cpi	r20, 0x9B	; 155
 282:	51 05       	cpc	r21, r1
 284:	08 f0       	brcs	.+2      	; 0x288 <main+0xd6>
 286:	a8 cf       	rjmp	.-176    	; 0x1d8 <main+0x26>
		{
			//Write New Temp Value
			LCD_vMoveCursor(1, 14);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	6e e0       	ldi	r22, 0x0E	; 14
 28c:	0e 94 22 03 	call	0x644	; 0x644 <LCD_vMoveCursor>
			LCD_vSendChar((temperature / 100) + 48);
 290:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 294:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 298:	b8 01       	movw	r22, r16
 29a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 29e:	86 2f       	mov	r24, r22
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(((temperature % 100) / 10) + 48);
 2a6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 2aa:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 2b4:	be 01       	movw	r22, r28
 2b6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 2ba:	86 2f       	mov	r24, r22
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(((temperature % 100) % 10) + 48);
 2c2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 2c6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 2ca:	b8 01       	movw	r22, r16
 2cc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 2d0:	be 01       	movw	r22, r28
 2d2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar(0xDF);
 2dc:	8f ed       	ldi	r24, 0xDF	; 223
 2de:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
			LCD_vSendChar('C');
 2e2:	83 e4       	ldi	r24, 0x43	; 67
 2e4:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
 2e8:	77 cf       	rjmp	.-274    	; 0x1d8 <main+0x26>

000002ea <ADC_vInit>:
#include "ADC.h"

void ADC_vInit(unsigned char channel)
{
	//Enable Internal ADC Module
	SET_BIT(ADCSRA, ADEN);
 2ea:	37 9a       	sbi	0x06, 7	; 6
	//Select Channel of ADC
	ADMUX |= channel;
 2ec:	97 b1       	in	r25, 0x07	; 7
 2ee:	89 2b       	or	r24, r25
 2f0:	87 b9       	out	0x07, r24	; 7
	//Configure Adjustment
	#if defined LEFT_ADJUST
	SET_BIT(ADMUX, ADLAR);
	#elif defined RIGHT_ADJUST
	CLR_BIT(ADMUX, ADLAR);
 2f2:	3d 98       	cbi	0x07, 5	; 7
	CLR_BIT(ADMUX, REFS1);
	#elif defined AVCC
	SET_BIT(ADMUX, REFS0);
	CLR_BIT(ADMUX, REFS1);
	#elif defined INTERNAL_REF
	SET_BIT(ADMUX, REFS0);
 2f4:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX, REFS1);
 2f6:	3f 9a       	sbi	0x07, 7	; 7
	#elif defined SCALE_32
	SET_BIT(ADCSRA, ADPS0);
	CLR_BIT(ADCSRA, ADPS1);
	SET_BIT(ADCSRA, ADPS2);
	#elif defined SCALE_64
	CLR_BIT(ADCSRA, ADPS0);
 2f8:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA, ADPS1);
 2fa:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA, ADPS2);
 2fc:	32 9a       	sbi	0x06, 2	; 6
 2fe:	08 95       	ret

00000300 <ADC_vStartConversion>:
	return return_val;
}

void ADC_vStartConversion(void)
{
	SET_BIT(ADCSRA, ADSC);
 300:	36 9a       	sbi	0x06, 6	; 6
 302:	08 95       	ret

00000304 <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short return_val;
	//Start Conversion
	ADC_vStartConversion();
 304:	0e 94 80 01 	call	0x300	; 0x300 <ADC_vStartConversion>
	//Checking the conversion
	while(READ_BIT(ADCSRA, ADIF) == 0);
 308:	34 9b       	sbis	0x06, 4	; 6
 30a:	fe cf       	rjmp	.-4      	; 0x308 <ADC_u16Read+0x4>
	//Clear Flag bit
	SET_BIT(ADCSRA, ADIF);
 30c:	34 9a       	sbi	0x06, 4	; 6
	//Read the value
	return_val = ADCL;
 30e:	84 b1       	in	r24, 0x04	; 4
	return_val |= (ADCH << 8);
 310:	25 b1       	in	r18, 0x05	; 5
	return return_val;
 312:	90 e0       	ldi	r25, 0x00	; 0
}
 314:	92 2b       	or	r25, r18
 316:	08 95       	ret

00000318 <DIO_vsetPinDir>:
			break;
		default:
			break;
	}
	return return_value;
}
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	e1 54       	subi	r30, 0x41	; 65
 31e:	f1 09       	sbc	r31, r1
 320:	e4 32       	cpi	r30, 0x24	; 36
 322:	f1 05       	cpc	r31, r1
 324:	08 f0       	brcs	.+2      	; 0x328 <DIO_vsetPinDir+0x10>
 326:	67 c0       	rjmp	.+206    	; 0x3f6 <DIO_vsetPinDir+0xde>
 328:	e6 5d       	subi	r30, 0xD6	; 214
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__tablejump2__>
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	59 f4       	brne	.+22     	; 0x34a <DIO_vsetPinDir+0x32>
 334:	2a b3       	in	r18, 0x1a	; 26
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vsetPinDir+0x28>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_vsetPinDir+0x24>
 344:	82 2b       	or	r24, r18
 346:	8a bb       	out	0x1a, r24	; 26
 348:	08 95       	ret
 34a:	2a b3       	in	r18, 0x1a	; 26
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vsetPinDir+0x3e>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_vsetPinDir+0x3a>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	8a bb       	out	0x1a, r24	; 26
 360:	08 95       	ret
 362:	41 30       	cpi	r20, 0x01	; 1
 364:	59 f4       	brne	.+22     	; 0x37c <DIO_vsetPinDir+0x64>
 366:	27 b3       	in	r18, 0x17	; 23
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_vsetPinDir+0x5a>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_vsetPinDir+0x56>
 376:	82 2b       	or	r24, r18
 378:	87 bb       	out	0x17, r24	; 23
 37a:	08 95       	ret
 37c:	27 b3       	in	r18, 0x17	; 23
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_vsetPinDir+0x70>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_vsetPinDir+0x6c>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	59 f4       	brne	.+22     	; 0x3ae <DIO_vsetPinDir+0x96>
 398:	24 b3       	in	r18, 0x14	; 20
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_vsetPinDir+0x8c>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_vsetPinDir+0x88>
 3a8:	82 2b       	or	r24, r18
 3aa:	84 bb       	out	0x14, r24	; 20
 3ac:	08 95       	ret
 3ae:	24 b3       	in	r18, 0x14	; 20
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_vsetPinDir+0xa2>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_vsetPinDir+0x9e>
 3be:	80 95       	com	r24
 3c0:	82 23       	and	r24, r18
 3c2:	84 bb       	out	0x14, r24	; 20
 3c4:	08 95       	ret
 3c6:	41 30       	cpi	r20, 0x01	; 1
 3c8:	59 f4       	brne	.+22     	; 0x3e0 <DIO_vsetPinDir+0xc8>
 3ca:	21 b3       	in	r18, 0x11	; 17
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_vsetPinDir+0xbe>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_vsetPinDir+0xba>
 3da:	82 2b       	or	r24, r18
 3dc:	81 bb       	out	0x11, r24	; 17
 3de:	08 95       	ret
 3e0:	21 b3       	in	r18, 0x11	; 17
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_vsetPinDir+0xd4>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_vsetPinDir+0xd0>
 3f0:	80 95       	com	r24
 3f2:	82 23       	and	r24, r18
 3f4:	81 bb       	out	0x11, r24	; 17
 3f6:	08 95       	ret

000003f8 <DIO_vWritePin>:
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	e1 54       	subi	r30, 0x41	; 65
 3fe:	f1 09       	sbc	r31, r1
 400:	e4 32       	cpi	r30, 0x24	; 36
 402:	f1 05       	cpc	r31, r1
 404:	08 f0       	brcs	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	67 c0       	rjmp	.+206    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 408:	e2 5b       	subi	r30, 0xB2	; 178
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__tablejump2__>
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	59 f4       	brne	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 414:	2b b3       	in	r18, 0x1b	; 27
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	8b bb       	out	0x1b, r24	; 27
 428:	08 95       	ret
 42a:	2b b3       	in	r18, 0x1b	; 27
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	8b bb       	out	0x1b, r24	; 27
 440:	08 95       	ret
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	59 f4       	brne	.+22     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 446:	28 b3       	in	r18, 0x18	; 24
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	88 bb       	out	0x18, r24	; 24
 45a:	08 95       	ret
 45c:	28 b3       	in	r18, 0x18	; 24
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	80 95       	com	r24
 46e:	82 23       	and	r24, r18
 470:	88 bb       	out	0x18, r24	; 24
 472:	08 95       	ret
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	59 f4       	brne	.+22     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 478:	25 b3       	in	r18, 0x15	; 21
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	82 2b       	or	r24, r18
 48a:	85 bb       	out	0x15, r24	; 21
 48c:	08 95       	ret
 48e:	25 b3       	in	r18, 0x15	; 21
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	85 bb       	out	0x15, r24	; 21
 4a4:	08 95       	ret
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4aa:	22 b3       	in	r18, 0x12	; 18
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	82 2b       	or	r24, r18
 4bc:	82 bb       	out	0x12, r24	; 18
 4be:	08 95       	ret
 4c0:	22 b3       	in	r18, 0x12	; 18
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	82 bb       	out	0x12, r24	; 18
 4d6:	08 95       	ret

000004d8 <DIO_vSetPortDirection>:

void DIO_vSetPortDirection(unsigned char portname, unsigned char direction)
{
	switch(portname)
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	fc 01       	movw	r30, r24
 4dc:	e1 54       	subi	r30, 0x41	; 65
 4de:	f1 09       	sbc	r31, r1
 4e0:	e4 32       	cpi	r30, 0x24	; 36
 4e2:	f1 05       	cpc	r31, r1
 4e4:	58 f4       	brcc	.+22     	; 0x4fc <DIO_vSetPortDirection+0x24>
 4e6:	ee 58       	subi	r30, 0x8E	; 142
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ea:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__tablejump2__>
	{
		case 'A':
		case 'a':
			DDRA = direction;
 4ee:	6a bb       	out	0x1a, r22	; 26
			break;
 4f0:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = direction;
 4f2:	67 bb       	out	0x17, r22	; 23
			break;
 4f4:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = direction;
 4f6:	64 bb       	out	0x14, r22	; 20
			break;
 4f8:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = direction;
 4fa:	61 bb       	out	0x11, r22	; 17
 4fc:	08 95       	ret

000004fe <DIO_vWritePort>:
	}
}

void DIO_vWritePort(unsigned char portname, unsigned char portvalue)
{
	switch(portname)
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	e1 54       	subi	r30, 0x41	; 65
 504:	f1 09       	sbc	r31, r1
 506:	e4 32       	cpi	r30, 0x24	; 36
 508:	f1 05       	cpc	r31, r1
 50a:	58 f4       	brcc	.+22     	; 0x522 <DIO_vWritePort+0x24>
 50c:	ea 56       	subi	r30, 0x6A	; 106
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA = portvalue;
 514:	6b bb       	out	0x1b, r22	; 27
			break;
 516:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = portvalue;
 518:	68 bb       	out	0x18, r22	; 24
			break;
 51a:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = portvalue;
 51c:	65 bb       	out	0x15, r22	; 21
			break;
 51e:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = portvalue;
 520:	62 bb       	out	0x12, r22	; 18
 522:	08 95       	ret

00000524 <LCD_vSendPulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	82 e4       	ldi	r24, 0x42	; 66
 52a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vWritePin>
 52e:	8f e9       	ldi	r24, 0x9F	; 159
 530:	9f e0       	ldi	r25, 0x0F	; 15
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <LCD_vSendPulse+0xe>
 536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_vSendPulse+0x14>
 538:	00 00       	nop
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	82 e4       	ldi	r24, 0x42	; 66
 540:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vWritePin>
 544:	8f e9       	ldi	r24, 0x9F	; 159
 546:	9f e0       	ldi	r25, 0x0F	; 15
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_vSendPulse+0x24>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_vSendPulse+0x2a>
 54e:	00 00       	nop
 550:	08 95       	ret

00000552 <LCD_vSendCMD>:
 552:	cf 93       	push	r28
 554:	c8 2f       	mov	r28, r24
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	82 e4       	ldi	r24, 0x42	; 66
 55c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vWritePin>
 560:	6c 2f       	mov	r22, r28
 562:	84 e4       	ldi	r24, 0x44	; 68
 564:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_vWritePort>
 568:	0e 94 92 02 	call	0x524	; 0x524 <LCD_vSendPulse>
 56c:	8f ec       	ldi	r24, 0xCF	; 207
 56e:	97 e0       	ldi	r25, 0x07	; 7
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_vSendCMD+0x1e>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_vSendCMD+0x24>
 576:	00 00       	nop
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <LCD_vInit>:
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	81 ee       	ldi	r24, 0xE1	; 225
 580:	94 e0       	ldi	r25, 0x04	; 4
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <LCD_vInit+0x6>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <LCD_vInit+0x10>
 58c:	00 00       	nop
 58e:	6f ef       	ldi	r22, 0xFF	; 255
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_vSetPortDirection>
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	82 e4       	ldi	r24, 0x42	; 66
 59c:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vsetPinDir>
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	82 e4       	ldi	r24, 0x42	; 66
 5a6:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vsetPinDir>
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	82 e4       	ldi	r24, 0x42	; 66
 5b0:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vsetPinDir>
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	82 e4       	ldi	r24, 0x42	; 66
 5ba:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vWritePin>
 5be:	88 e3       	ldi	r24, 0x38	; 56
 5c0:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_vSendCMD>
 5c4:	8f ec       	ldi	r24, 0xCF	; 207
 5c6:	97 e0       	ldi	r25, 0x07	; 7
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_vInit+0x4c>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_vInit+0x52>
 5ce:	00 00       	nop
 5d0:	8c e0       	ldi	r24, 0x0C	; 12
 5d2:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_vSendCMD>
 5d6:	8f ec       	ldi	r24, 0xCF	; 207
 5d8:	97 e0       	ldi	r25, 0x07	; 7
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <LCD_vInit+0x5e>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <LCD_vInit+0x64>
 5e0:	00 00       	nop
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_vSendCMD>
 5e8:	8f e1       	ldi	r24, 0x1F	; 31
 5ea:	9e e4       	ldi	r25, 0x4E	; 78
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_vInit+0x70>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_vInit+0x76>
 5f2:	00 00       	nop
 5f4:	86 e0       	ldi	r24, 0x06	; 6
 5f6:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_vSendCMD>
 5fa:	8f ec       	ldi	r24, 0xCF	; 207
 5fc:	97 e0       	ldi	r25, 0x07	; 7
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_vInit+0x82>
 602:	00 c0       	rjmp	.+0      	; 0x604 <LCD_vInit+0x88>
 604:	00 00       	nop
 606:	08 95       	ret

00000608 <LCD_vSendChar>:
 608:	cf 93       	push	r28
 60a:	c8 2f       	mov	r28, r24
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	82 e4       	ldi	r24, 0x42	; 66
 612:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_vWritePin>
 616:	6c 2f       	mov	r22, r28
 618:	84 e4       	ldi	r24, 0x44	; 68
 61a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_vWritePort>
 61e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_vSendPulse>
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <LCD_vSendString>:
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ec 01       	movw	r28, r24
 62c:	88 81       	ld	r24, Y
 62e:	88 23       	and	r24, r24
 630:	31 f0       	breq	.+12     	; 0x63e <LCD_vSendString+0x18>
 632:	21 96       	adiw	r28, 0x01	; 1
 634:	0e 94 04 03 	call	0x608	; 0x608 <LCD_vSendChar>
 638:	89 91       	ld	r24, Y+
 63a:	81 11       	cpse	r24, r1
 63c:	fb cf       	rjmp	.-10     	; 0x634 <LCD_vSendString+0xe>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <LCD_vMoveCursor>:
}

void LCD_vMoveCursor(char row, char column)
{
	unsigned char data;
	if(row < 1 || row > 2 || column > 20 || column < 1)
 644:	9f ef       	ldi	r25, 0xFF	; 255
 646:	98 0f       	add	r25, r24
 648:	92 30       	cpi	r25, 0x02	; 2
 64a:	68 f4       	brcc	.+26     	; 0x666 <LCD_vMoveCursor+0x22>
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	96 0f       	add	r25, r22
 650:	94 31       	cpi	r25, 0x14	; 20
 652:	48 f4       	brcc	.+18     	; 0x666 <LCD_vMoveCursor+0x22>
	{
		data = 0x80;
	}
	else
	{
		if(row == 1)
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	19 f4       	brne	.+6      	; 0x65e <LCD_vMoveCursor+0x1a>
		{
			data = 0x80 + column - 1;
 658:	8f e7       	ldi	r24, 0x7F	; 127
 65a:	86 0f       	add	r24, r22
 65c:	02 c0       	rjmp	.+4      	; 0x662 <LCD_vMoveCursor+0x1e>
		}
		else
		{
			data = 0xC0 + column - 1;
 65e:	8f eb       	ldi	r24, 0xBF	; 191
 660:	86 0f       	add	r24, r22
		}
		LCD_vSendCMD(data);
 662:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_vSendCMD>
 666:	08 95       	ret

00000668 <__fixunssfsi>:
 668:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_splitA>
 66c:	88 f0       	brcs	.+34     	; 0x690 <__fixunssfsi+0x28>
 66e:	9f 57       	subi	r25, 0x7F	; 127
 670:	98 f0       	brcs	.+38     	; 0x698 <__fixunssfsi+0x30>
 672:	b9 2f       	mov	r27, r25
 674:	99 27       	eor	r25, r25
 676:	b7 51       	subi	r27, 0x17	; 23
 678:	b0 f0       	brcs	.+44     	; 0x6a6 <__fixunssfsi+0x3e>
 67a:	e1 f0       	breq	.+56     	; 0x6b4 <__fixunssfsi+0x4c>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a f0       	brmi	.+6      	; 0x68c <__fixunssfsi+0x24>
 686:	ba 95       	dec	r27
 688:	c9 f7       	brne	.-14     	; 0x67c <__fixunssfsi+0x14>
 68a:	14 c0       	rjmp	.+40     	; 0x6b4 <__fixunssfsi+0x4c>
 68c:	b1 30       	cpi	r27, 0x01	; 1
 68e:	91 f0       	breq	.+36     	; 0x6b4 <__fixunssfsi+0x4c>
 690:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_zero>
 694:	b1 e0       	ldi	r27, 0x01	; 1
 696:	08 95       	ret
 698:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_zero>
 69c:	67 2f       	mov	r22, r23
 69e:	78 2f       	mov	r23, r24
 6a0:	88 27       	eor	r24, r24
 6a2:	b8 5f       	subi	r27, 0xF8	; 248
 6a4:	39 f0       	breq	.+14     	; 0x6b4 <__fixunssfsi+0x4c>
 6a6:	b9 3f       	cpi	r27, 0xF9	; 249
 6a8:	cc f3       	brlt	.-14     	; 0x69c <__fixunssfsi+0x34>
 6aa:	86 95       	lsr	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b3 95       	inc	r27
 6b2:	d9 f7       	brne	.-10     	; 0x6aa <__fixunssfsi+0x42>
 6b4:	3e f4       	brtc	.+14     	; 0x6c4 <__fixunssfsi+0x5c>
 6b6:	90 95       	com	r25
 6b8:	80 95       	com	r24
 6ba:	70 95       	com	r23
 6bc:	61 95       	neg	r22
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__floatunsisf>:
 6c6:	e8 94       	clt
 6c8:	09 c0       	rjmp	.+18     	; 0x6dc <__floatsisf+0x12>

000006ca <__floatsisf>:
 6ca:	97 fb       	bst	r25, 7
 6cc:	3e f4       	brtc	.+14     	; 0x6dc <__floatsisf+0x12>
 6ce:	90 95       	com	r25
 6d0:	80 95       	com	r24
 6d2:	70 95       	com	r23
 6d4:	61 95       	neg	r22
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	99 23       	and	r25, r25
 6de:	a9 f0       	breq	.+42     	; 0x70a <__floatsisf+0x40>
 6e0:	f9 2f       	mov	r31, r25
 6e2:	96 e9       	ldi	r25, 0x96	; 150
 6e4:	bb 27       	eor	r27, r27
 6e6:	93 95       	inc	r25
 6e8:	f6 95       	lsr	r31
 6ea:	87 95       	ror	r24
 6ec:	77 95       	ror	r23
 6ee:	67 95       	ror	r22
 6f0:	b7 95       	ror	r27
 6f2:	f1 11       	cpse	r31, r1
 6f4:	f8 cf       	rjmp	.-16     	; 0x6e6 <__floatsisf+0x1c>
 6f6:	fa f4       	brpl	.+62     	; 0x736 <__floatsisf+0x6c>
 6f8:	bb 0f       	add	r27, r27
 6fa:	11 f4       	brne	.+4      	; 0x700 <__floatsisf+0x36>
 6fc:	60 ff       	sbrs	r22, 0
 6fe:	1b c0       	rjmp	.+54     	; 0x736 <__floatsisf+0x6c>
 700:	6f 5f       	subi	r22, 0xFF	; 255
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	16 c0       	rjmp	.+44     	; 0x736 <__floatsisf+0x6c>
 70a:	88 23       	and	r24, r24
 70c:	11 f0       	breq	.+4      	; 0x712 <__floatsisf+0x48>
 70e:	96 e9       	ldi	r25, 0x96	; 150
 710:	11 c0       	rjmp	.+34     	; 0x734 <__floatsisf+0x6a>
 712:	77 23       	and	r23, r23
 714:	21 f0       	breq	.+8      	; 0x71e <__floatsisf+0x54>
 716:	9e e8       	ldi	r25, 0x8E	; 142
 718:	87 2f       	mov	r24, r23
 71a:	76 2f       	mov	r23, r22
 71c:	05 c0       	rjmp	.+10     	; 0x728 <__floatsisf+0x5e>
 71e:	66 23       	and	r22, r22
 720:	71 f0       	breq	.+28     	; 0x73e <__floatsisf+0x74>
 722:	96 e8       	ldi	r25, 0x86	; 134
 724:	86 2f       	mov	r24, r22
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	2a f0       	brmi	.+10     	; 0x736 <__floatsisf+0x6c>
 72c:	9a 95       	dec	r25
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	da f7       	brpl	.-10     	; 0x72c <__floatsisf+0x62>
 736:	88 0f       	add	r24, r24
 738:	96 95       	lsr	r25
 73a:	87 95       	ror	r24
 73c:	97 f9       	bld	r25, 7
 73e:	08 95       	ret

00000740 <__fp_split3>:
 740:	57 fd       	sbrc	r21, 7
 742:	90 58       	subi	r25, 0x80	; 128
 744:	44 0f       	add	r20, r20
 746:	55 1f       	adc	r21, r21
 748:	59 f0       	breq	.+22     	; 0x760 <__fp_splitA+0x10>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	71 f0       	breq	.+28     	; 0x76a <__fp_splitA+0x1a>
 74e:	47 95       	ror	r20

00000750 <__fp_splitA>:
 750:	88 0f       	add	r24, r24
 752:	97 fb       	bst	r25, 7
 754:	99 1f       	adc	r25, r25
 756:	61 f0       	breq	.+24     	; 0x770 <__fp_splitA+0x20>
 758:	9f 3f       	cpi	r25, 0xFF	; 255
 75a:	79 f0       	breq	.+30     	; 0x77a <__fp_splitA+0x2a>
 75c:	87 95       	ror	r24
 75e:	08 95       	ret
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	55 1f       	adc	r21, r21
 768:	f2 cf       	rjmp	.-28     	; 0x74e <__fp_split3+0xe>
 76a:	46 95       	lsr	r20
 76c:	f1 df       	rcall	.-30     	; 0x750 <__fp_splitA>
 76e:	08 c0       	rjmp	.+16     	; 0x780 <__fp_splitA+0x30>
 770:	16 16       	cp	r1, r22
 772:	17 06       	cpc	r1, r23
 774:	18 06       	cpc	r1, r24
 776:	99 1f       	adc	r25, r25
 778:	f1 cf       	rjmp	.-30     	; 0x75c <__fp_splitA+0xc>
 77a:	86 95       	lsr	r24
 77c:	71 05       	cpc	r23, r1
 77e:	61 05       	cpc	r22, r1
 780:	08 94       	sec
 782:	08 95       	ret

00000784 <__fp_zero>:
 784:	e8 94       	clt

00000786 <__fp_szero>:
 786:	bb 27       	eor	r27, r27
 788:	66 27       	eor	r22, r22
 78a:	77 27       	eor	r23, r23
 78c:	cb 01       	movw	r24, r22
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret

00000792 <__mulsf3>:
 792:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__mulsf3x>
 796:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_round>
 79a:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_pscA>
 79e:	38 f0       	brcs	.+14     	; 0x7ae <__mulsf3+0x1c>
 7a0:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscB>
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__mulsf3+0x1c>
 7a6:	95 23       	and	r25, r21
 7a8:	11 f0       	breq	.+4      	; 0x7ae <__mulsf3+0x1c>
 7aa:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_inf>
 7ae:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_nan>
 7b2:	11 24       	eor	r1, r1
 7b4:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_szero>

000007b8 <__mulsf3x>:
 7b8:	0e 94 a0 03 	call	0x740	; 0x740 <__fp_split3>
 7bc:	70 f3       	brcs	.-36     	; 0x79a <__mulsf3+0x8>

000007be <__mulsf3_pse>:
 7be:	95 9f       	mul	r25, r21
 7c0:	c1 f3       	breq	.-16     	; 0x7b2 <__mulsf3+0x20>
 7c2:	95 0f       	add	r25, r21
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	55 1f       	adc	r21, r21
 7c8:	62 9f       	mul	r22, r18
 7ca:	f0 01       	movw	r30, r0
 7cc:	72 9f       	mul	r23, r18
 7ce:	bb 27       	eor	r27, r27
 7d0:	f0 0d       	add	r31, r0
 7d2:	b1 1d       	adc	r27, r1
 7d4:	63 9f       	mul	r22, r19
 7d6:	aa 27       	eor	r26, r26
 7d8:	f0 0d       	add	r31, r0
 7da:	b1 1d       	adc	r27, r1
 7dc:	aa 1f       	adc	r26, r26
 7de:	64 9f       	mul	r22, r20
 7e0:	66 27       	eor	r22, r22
 7e2:	b0 0d       	add	r27, r0
 7e4:	a1 1d       	adc	r26, r1
 7e6:	66 1f       	adc	r22, r22
 7e8:	82 9f       	mul	r24, r18
 7ea:	22 27       	eor	r18, r18
 7ec:	b0 0d       	add	r27, r0
 7ee:	a1 1d       	adc	r26, r1
 7f0:	62 1f       	adc	r22, r18
 7f2:	73 9f       	mul	r23, r19
 7f4:	b0 0d       	add	r27, r0
 7f6:	a1 1d       	adc	r26, r1
 7f8:	62 1f       	adc	r22, r18
 7fa:	83 9f       	mul	r24, r19
 7fc:	a0 0d       	add	r26, r0
 7fe:	61 1d       	adc	r22, r1
 800:	22 1f       	adc	r18, r18
 802:	74 9f       	mul	r23, r20
 804:	33 27       	eor	r19, r19
 806:	a0 0d       	add	r26, r0
 808:	61 1d       	adc	r22, r1
 80a:	23 1f       	adc	r18, r19
 80c:	84 9f       	mul	r24, r20
 80e:	60 0d       	add	r22, r0
 810:	21 1d       	adc	r18, r1
 812:	82 2f       	mov	r24, r18
 814:	76 2f       	mov	r23, r22
 816:	6a 2f       	mov	r22, r26
 818:	11 24       	eor	r1, r1
 81a:	9f 57       	subi	r25, 0x7F	; 127
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	9a f0       	brmi	.+38     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 820:	f1 f0       	breq	.+60     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 822:	88 23       	and	r24, r24
 824:	4a f0       	brmi	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	bb 1f       	adc	r27, r27
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	91 50       	subi	r25, 0x01	; 1
 834:	50 40       	sbci	r21, 0x00	; 0
 836:	a9 f7       	brne	.-22     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	51 05       	cpc	r21, r1
 83c:	80 f0       	brcs	.+32     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 83e:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_inf>
 842:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_szero>
 846:	5f 3f       	cpi	r21, 0xFF	; 255
 848:	e4 f3       	brlt	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	98 3e       	cpi	r25, 0xE8	; 232
 84c:	d4 f3       	brlt	.-12     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84e:	86 95       	lsr	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	e7 95       	ror	r30
 85a:	9f 5f       	subi	r25, 0xFF	; 255
 85c:	c1 f7       	brne	.-16     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 85e:	fe 2b       	or	r31, r30
 860:	88 0f       	add	r24, r24
 862:	91 1d       	adc	r25, r1
 864:	96 95       	lsr	r25
 866:	87 95       	ror	r24
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret

0000086c <__fp_inf>:
 86c:	97 f9       	bld	r25, 7
 86e:	9f 67       	ori	r25, 0x7F	; 127
 870:	80 e8       	ldi	r24, 0x80	; 128
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	08 95       	ret

00000878 <__fp_nan>:
 878:	9f ef       	ldi	r25, 0xFF	; 255
 87a:	80 ec       	ldi	r24, 0xC0	; 192
 87c:	08 95       	ret

0000087e <__fp_pscA>:
 87e:	00 24       	eor	r0, r0
 880:	0a 94       	dec	r0
 882:	16 16       	cp	r1, r22
 884:	17 06       	cpc	r1, r23
 886:	18 06       	cpc	r1, r24
 888:	09 06       	cpc	r0, r25
 88a:	08 95       	ret

0000088c <__fp_pscB>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	05 06       	cpc	r0, r21
 898:	08 95       	ret

0000089a <__fp_round>:
 89a:	09 2e       	mov	r0, r25
 89c:	03 94       	inc	r0
 89e:	00 0c       	add	r0, r0
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <__fp_round+0xc>
 8a2:	88 23       	and	r24, r24
 8a4:	52 f0       	brmi	.+20     	; 0x8ba <__fp_round+0x20>
 8a6:	bb 0f       	add	r27, r27
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <__fp_round+0x20>
 8aa:	bf 2b       	or	r27, r31
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_round+0x18>
 8ae:	60 ff       	sbrs	r22, 0
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__fp_round+0x20>
 8b2:	6f 5f       	subi	r22, 0xFF	; 255
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <__udivmodhi4>:
 8bc:	aa 1b       	sub	r26, r26
 8be:	bb 1b       	sub	r27, r27
 8c0:	51 e1       	ldi	r21, 0x11	; 17
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <__udivmodhi4_ep>

000008c4 <__udivmodhi4_loop>:
 8c4:	aa 1f       	adc	r26, r26
 8c6:	bb 1f       	adc	r27, r27
 8c8:	a6 17       	cp	r26, r22
 8ca:	b7 07       	cpc	r27, r23
 8cc:	10 f0       	brcs	.+4      	; 0x8d2 <__udivmodhi4_ep>
 8ce:	a6 1b       	sub	r26, r22
 8d0:	b7 0b       	sbc	r27, r23

000008d2 <__udivmodhi4_ep>:
 8d2:	88 1f       	adc	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	5a 95       	dec	r21
 8d8:	a9 f7       	brne	.-22     	; 0x8c4 <__udivmodhi4_loop>
 8da:	80 95       	com	r24
 8dc:	90 95       	com	r25
 8de:	bc 01       	movw	r22, r24
 8e0:	cd 01       	movw	r24, r26
 8e2:	08 95       	ret

000008e4 <__tablejump2__>:
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	05 90       	lpm	r0, Z+
 8ea:	f4 91       	lpm	r31, Z
 8ec:	e0 2d       	mov	r30, r0
 8ee:	09 94       	ijmp

000008f0 <_exit>:
 8f0:	f8 94       	cli

000008f2 <__stop_program>:
 8f2:	ff cf       	rjmp	.-2      	; 0x8f2 <__stop_program>
